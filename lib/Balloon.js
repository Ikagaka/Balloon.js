// Generated by CoffeeScript 1.7.1
(function() {
  var Balloon, BalloonSurface, SurfaceRender, SurfaceUtil, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require("ikagaka.shell.js"), SurfaceRender = _ref.SurfaceRender, SurfaceUtil = _ref.SurfaceUtil;

  BalloonSurface = require("./BalloonSurface").BalloonSurface;

  Balloon = (function(_super) {
    __extends(Balloon, _super);

    function Balloon(directory) {
      this.directory = directory;
      Balloon.__super__.constructor.call(this);
      this.descript = {};
      this.attachedSurface = [];
      this.balloons = {
        "sakura": [],
        "kero": [],
        "communicate": [],
        "online": [],
        "arrow": [],
        "sstp": null,
        "thumbnail": null
      };
    }

    Balloon.prototype.load = function() {
      return Promise.resolve(this).then((function(_this) {
        return function() {
          return _this.loadDescript();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.loadBalloonSurfaces();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.loadBalloonDescripts();
        };
      })(this));
    };

    Balloon.prototype.loadDescript = function() {
      var descript_name, dir, getName;
      Balloon.prototype.loadDescript = function() {
        return console.warn("loadDescript method allows only 1st call");
      };
      dir = this.directory;
      getName = (function(_this) {
        return function(dic, reg) {
          return Object.keys(dic).filter(function(name) {
            return reg.test(name);
          })[0] || "";
        };
      })(this);
      descript_name = getName(dir, /^descript\.txt$/i);
      if (descript_name === "") {
        console.info("descript.txt is not found");
        this.descript = {};
      } else {
        this.descript = SurfaceUtil.parseDescript(SurfaceUtil.convert(dir[descript_name]));
      }
      return Promise.resolve(this);
    };

    Balloon.prototype.loadBalloonDescripts = function() {
      var balloons, descript, directory;
      Balloon.prototype.loadBalloonDescripts = function() {
        return console.warn("loadBalloonDescripts method allows only 1st call");
      };
      directory = this.directory;
      balloons = this.balloons;
      descript = this.descript;
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var hits, keys;
          keys = Object.keys(directory);
          hits = keys.filter(function(filepath) {
            return /balloon([sk])(\d+)s\.txt$/.test(filepath);
          });
          hits.forEach(function(filepath) {
            var buffer, n, type, __, _descript, _ref1;
            buffer = directory[filepath];
            _descript = SurfaceUtil.parseDescript(SurfaceUtil.convert(buffer));
            _ref1 = /balloon([sk])(\d+)s\.txt$/.exec(filepath), __ = _ref1[0], type = _ref1[1], n = _ref1[2];
            switch (type) {
              case "s":
                return balloons["sakura"][Number(n)].descript = $.extend(true, _descript, descript);
              case "k":
                return balloons["kero"][Number(n)].descript = $.extend(true, _descript, descript);
            }
          });
          return resolve(_this);
        };
      })(this));
    };

    Balloon.prototype.loadBalloonSurfaces = function() {
      var balloons, directory, hits, keys, promises;
      Balloon.prototype.loadBalloonSurfaces = function() {
        return console.warn("loadBalloonSurfaces method allows only 1st call");
      };
      directory = this.directory;
      balloons = this.balloons;
      keys = Object.keys(directory);
      hits = keys.filter(function(filepath) {
        return /[^\/]+\.png$/.test(filepath);
      });
      promises = hits.map(function(filepath) {
        return new Promise(function(resolve, reject) {
          var buffer, url;
          buffer = directory[filepath];
          url = URL.createObjectURL(new Blob([buffer], {
            type: "image/png"
          }));
          return SurfaceUtil.fetchImageFromURL(url).then(function(img) {
            return [null, img];
          })["catch"](function(err) {
            return [err, null];
          }).then(function(_arg) {
            var err, img, n, rndr, type, __, _ref1, _ref2, _ref3;
            err = _arg[0], img = _arg[1];
            if (!!err) {
              return reject(err);
            }
            URL.revokeObjectURL(url);
            if (!!err) {
              return reject(err);
            }
            rndr = new SurfaceRender(SurfaceUtil.copy(img));
            rndr.chromakey();
            if (/^balloon([ksc])(\d+)\.png$/.test(filepath)) {
              _ref1 = /^balloon([ksc])(\d+)\.png$/.exec(filepath), __ = _ref1[0], type = _ref1[1], n = _ref1[2];
              switch (type) {
                case "s":
                  balloons["sakura"][Number(n)] = {
                    canvas: rndr.cnv
                  };
                  break;
                case "k":
                  balloons["kero"][Number(n)] = {
                    canvas: rndr.cnv
                  };
                  break;
                case "c":
                  balloons["communicate"][Number(n)] = {
                    canvas: rndr.cnv
                  };
              }
            } else if (/^online(\d+)\.png$/.test(filepath)) {
              _ref2 = /^online(\d+)\.png$/.exec(filepath), __ = _ref2[0], n = _ref2[1];
              balloons["online"][Number(n)] = {
                canvas: rndr.cnv
              };
            } else if (/^arrow(\d+)\.png$/.test(filepath)) {
              _ref3 = /^arrow(\d+)\.png$/.exec(filepath), __ = _ref3[0], n = _ref3[1];
              balloons["arrow"][Number(n)] = {
                canvas: rndr.cnv
              };
            } else if (/^sstp\.png$/.test(filepath)) {
              balloons["sstp"] = {
                canvas: rndr.cnv
              };
            } else if (/^thumbnail\.png$/.test(filepath)) {
              balloons["thumbnail"] = {
                canvas: rndr.cnv
              };
            }
            return resolve();
          });
        });
      });
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return Promise.all(promises).then(function() {
            return resolve(_this);
          });
        };
      })(this));
    };

    Balloon.prototype.unload = function() {
      this.attachedBlimp.forEach(function(_arg) {
        var blimp, element;
        element = _arg.element, blimp = _arg.blimp;
        return blimp.destructor();
      });
      this.removeAllListeners();
      Object.keys(this).forEach((function(_this) {
        return function(key) {
          return _this[key] = new _this[key].constructor();
        };
      })(this));
    };

    Balloon.prototype.attachBlimp = function(element, scopeId, balloonId) {
      var blimp, type;
      type = SurfaceUtil.scope(scopeId);
      if (this.balloons[type][balloonId] == null) {
        console.warn("balloon id:", balloonId, "is not defined");
        return null;
      }
      blimp = new BalloonSurface(element, scopeId, balloonId, this);
      this.attachedSurface.push({
        blimp: blimp,
        element: element
      });
      return blimp;
    };

    Balloon.prototype.dettatchBlimp = function(element) {
      var hits;
      hits = this.attachedBlimp.filter((function(_this) {
        return function(_arg) {
          var _element;
          _element = _arg.element;
          return _element === element;
        };
      })(this));
      if (hits.length === 0) {
        return;
      }
      hits[0].blimp.destructor();
      this.attachedBlimp.splice(this.attachedBlimp.indexOf(hits[0]), 1);
    };

    return Balloon;

  })(EventEmitter2);

  exports.Balloon = Balloon;

}).call(this);
